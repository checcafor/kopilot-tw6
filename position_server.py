import json										# import the 'json' module for working with JSON data
from websocket_server import WebsocketServer	# import the 'WebsocketServer' class from the 'websocket_server' module
from datetime import datetime					# import the 'datetime' class from the 'datetime' module
from function import connect					# import the 'connect' function from the 'function' module

WS_PORT = 9001		# setting WebSocket port for communication
HTTP_PORT = 5001	# setting the HTTP port for the flask web server
HOST = "0.0.0.0"	# setting the HOST address to bind the server to: "0.0.0.0", that means the server will listen on all available network interfaces.

# function called for every client connecting (after handshake)
def new_client(client, server):
	print("New client connected")	# print a message in the python console

# function called for every client disconnecting
def client_left(client, server):
	print("Client disconnected")	# print a message in the python console

# function called when a client sends a message
def message_received(client, server, message):

	m = json.loads(message)			# parse the JSON string 'message' and convert it into a Python object.
	
	# if the "lat" and "lon" attributes are set in the message, it means that the message transmitted is a position capture message
	if "lat" in m and "lon" in m:
		_idUtente = m['idUtente']  	# get user ID from WebSocket message
		timestamp = m['timestamp']  # get the timestamp of the user's location capture from the WebSocket message
		lat = m["lat"]				# get user latitude from WebSocket message
		lon = m["lon"]				# get user lonitude from WebSocket message

		connection = connect("database.db")     # a connection is established to the database called "database.db"
		cursor = connection.cursor()            # a cursor object is created to execute queries

		# the query is executed that updates the user's position with that obtained in real time from the web socket
		cursor.execute("UPDATE Tracking SET lat = ?, lon = ?, time_stamp = ? WHERE _idUtente = ?", (lat, lon, timestamp, _idUtente))
		connection.commit()                     # the changes generated by the previous query are committed

		print("Client said: %s" % (message))	# debug message for the server LOG
		connection.close()						# the connection with the database is closed

	elif "wakeup" in m:	# otherwise it means that the message just found is a message to keep the connection with the web socket active
		print("\n")	# dummy print

# function to start the WebSocket server
def my_websocket_server():
	server = WebsocketServer(port=WS_PORT, host=HOST)	# create an instance of WebsocketServer with specified port and host
	server.set_fn_new_client(new_client)				# set a callback function for handling new client connections
	server.set_fn_client_left(client_left)				# set a callback function for handling client disconnections
	server.set_fn_message_received(message_received)	# set a callback function for handling received messages from clients
	server.run_forever()								# start the WebSocket server and run it indefinitely
